// Code generated by protoc-gen-go. DO NOT EDIT.
// source: checkers.proto

package models

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Move struct {
	From                 int32    `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   int32    `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Move) Reset()         { *m = Move{} }
func (m *Move) String() string { return proto.CompactTextString(m) }
func (*Move) ProtoMessage()    {}
func (*Move) Descriptor() ([]byte, []int) {
	return fileDescriptor_49bee1d1b4b6400f, []int{0}
}

func (m *Move) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Move.Unmarshal(m, b)
}
func (m *Move) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Move.Marshal(b, m, deterministic)
}
func (m *Move) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Move.Merge(m, src)
}
func (m *Move) XXX_Size() int {
	return xxx_messageInfo_Move.Size(m)
}
func (m *Move) XXX_DiscardUnknown() {
	xxx_messageInfo_Move.DiscardUnknown(m)
}

var xxx_messageInfo_Move proto.InternalMessageInfo

func (m *Move) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Move) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

type Piece struct {
	Id                      int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Player                  bool    `protobuf:"varint,2,opt,name=player,proto3" json:"player,omitempty"`
	Position                int32   `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	King                    bool    `protobuf:"varint,4,opt,name=king,proto3" json:"king,omitempty"`
	Captured                bool    `protobuf:"varint,5,opt,name=captured,proto3" json:"captured,omitempty"`
	PossibleCaptureMoves    []*Move `protobuf:"bytes,6,rep,name=possible_capture_moves,json=possibleCaptureMoves,proto3" json:"possible_capture_moves,omitempty"`
	PossiblePositionalMoves []*Move `protobuf:"bytes,7,rep,name=possible_positional_moves,json=possiblePositionalMoves,proto3" json:"possible_positional_moves,omitempty"`
	// This is a map of position to pience ID
	CaptureMoveEnemies   map[int32]int32 `protobuf:"bytes,8,rep,name=capture_move_enemies,json=captureMoveEnemies,proto3" json:"capture_move_enemies,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Piece) Reset()         { *m = Piece{} }
func (m *Piece) String() string { return proto.CompactTextString(m) }
func (*Piece) ProtoMessage()    {}
func (*Piece) Descriptor() ([]byte, []int) {
	return fileDescriptor_49bee1d1b4b6400f, []int{1}
}

func (m *Piece) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Piece.Unmarshal(m, b)
}
func (m *Piece) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Piece.Marshal(b, m, deterministic)
}
func (m *Piece) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Piece.Merge(m, src)
}
func (m *Piece) XXX_Size() int {
	return xxx_messageInfo_Piece.Size(m)
}
func (m *Piece) XXX_DiscardUnknown() {
	xxx_messageInfo_Piece.DiscardUnknown(m)
}

var xxx_messageInfo_Piece proto.InternalMessageInfo

func (m *Piece) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Piece) GetPlayer() bool {
	if m != nil {
		return m.Player
	}
	return false
}

func (m *Piece) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *Piece) GetKing() bool {
	if m != nil {
		return m.King
	}
	return false
}

func (m *Piece) GetCaptured() bool {
	if m != nil {
		return m.Captured
	}
	return false
}

func (m *Piece) GetPossibleCaptureMoves() []*Move {
	if m != nil {
		return m.PossibleCaptureMoves
	}
	return nil
}

func (m *Piece) GetPossiblePositionalMoves() []*Move {
	if m != nil {
		return m.PossiblePositionalMoves
	}
	return nil
}

func (m *Piece) GetCaptureMoveEnemies() map[int32]int32 {
	if m != nil {
		return m.CaptureMoveEnemies
	}
	return nil
}

type Board struct {
	Id                                string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pieces                            []*Piece         `protobuf:"bytes,2,rep,name=pieces,proto3" json:"pieces,omitempty"`
	PreviousMoveWasCapture            bool             `protobuf:"varint,3,opt,name=previous_move_was_capture,json=previousMoveWasCapture,proto3" json:"previous_move_was_capture,omitempty"`
	PlayertTurn                       bool             `protobuf:"varint,4,opt,name=playert_turn,json=playertTurn,proto3" json:"playert_turn,omitempty"`
	PieceRequiringFurtherCaptureMoves *Piece           `protobuf:"bytes,5,opt,name=piece_requiring_further_capture_moves,json=pieceRequiringFurtherCaptureMoves,proto3" json:"piece_requiring_further_capture_moves,omitempty"`
	UncapturedPieces                  []*Piece         `protobuf:"bytes,6,rep,name=uncaptured_pieces,json=uncapturedPieces,proto3" json:"uncaptured_pieces,omitempty"`
	OpenPositions                     []int32          `protobuf:"varint,7,rep,packed,name=open_positions,json=openPositions,proto3" json:"open_positions,omitempty"`
	FilledPositions                   []int32          `protobuf:"varint,8,rep,packed,name=filled_positions,json=filledPositions,proto3" json:"filled_positions,omitempty"`
	WhitePositions                    []int32          `protobuf:"varint,9,rep,packed,name=white_positions,json=whitePositions,proto3" json:"white_positions,omitempty"`
	BlackPositions                    []int32          `protobuf:"varint,10,rep,packed,name=black_positions,json=blackPositions,proto3" json:"black_positions,omitempty"`
	WhitePieces                       []*Piece         `protobuf:"bytes,11,rep,name=white_pieces,json=whitePieces,proto3" json:"white_pieces,omitempty"`
	BlackPieces                       []*Piece         `protobuf:"bytes,12,rep,name=black_pieces,json=blackPieces,proto3" json:"black_pieces,omitempty"`
	PositionPieces                    map[int32]*Piece `protobuf:"bytes,13,rep,name=position_pieces,json=positionPieces,proto3" json:"position_pieces,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PieceById                         map[int32]*Piece `protobuf:"bytes,14,rep,name=piece_by_id,json=pieceById,proto3" json:"piece_by_id,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral              struct{}         `json:"-"`
	XXX_unrecognized                  []byte           `json:"-"`
	XXX_sizecache                     int32            `json:"-"`
}

func (m *Board) Reset()         { *m = Board{} }
func (m *Board) String() string { return proto.CompactTextString(m) }
func (*Board) ProtoMessage()    {}
func (*Board) Descriptor() ([]byte, []int) {
	return fileDescriptor_49bee1d1b4b6400f, []int{2}
}

func (m *Board) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Board.Unmarshal(m, b)
}
func (m *Board) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Board.Marshal(b, m, deterministic)
}
func (m *Board) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Board.Merge(m, src)
}
func (m *Board) XXX_Size() int {
	return xxx_messageInfo_Board.Size(m)
}
func (m *Board) XXX_DiscardUnknown() {
	xxx_messageInfo_Board.DiscardUnknown(m)
}

var xxx_messageInfo_Board proto.InternalMessageInfo

func (m *Board) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Board) GetPieces() []*Piece {
	if m != nil {
		return m.Pieces
	}
	return nil
}

func (m *Board) GetPreviousMoveWasCapture() bool {
	if m != nil {
		return m.PreviousMoveWasCapture
	}
	return false
}

func (m *Board) GetPlayertTurn() bool {
	if m != nil {
		return m.PlayertTurn
	}
	return false
}

func (m *Board) GetPieceRequiringFurtherCaptureMoves() *Piece {
	if m != nil {
		return m.PieceRequiringFurtherCaptureMoves
	}
	return nil
}

func (m *Board) GetUncapturedPieces() []*Piece {
	if m != nil {
		return m.UncapturedPieces
	}
	return nil
}

func (m *Board) GetOpenPositions() []int32 {
	if m != nil {
		return m.OpenPositions
	}
	return nil
}

func (m *Board) GetFilledPositions() []int32 {
	if m != nil {
		return m.FilledPositions
	}
	return nil
}

func (m *Board) GetWhitePositions() []int32 {
	if m != nil {
		return m.WhitePositions
	}
	return nil
}

func (m *Board) GetBlackPositions() []int32 {
	if m != nil {
		return m.BlackPositions
	}
	return nil
}

func (m *Board) GetWhitePieces() []*Piece {
	if m != nil {
		return m.WhitePieces
	}
	return nil
}

func (m *Board) GetBlackPieces() []*Piece {
	if m != nil {
		return m.BlackPieces
	}
	return nil
}

func (m *Board) GetPositionPieces() map[int32]*Piece {
	if m != nil {
		return m.PositionPieces
	}
	return nil
}

func (m *Board) GetPieceById() map[int32]*Piece {
	if m != nil {
		return m.PieceById
	}
	return nil
}

func init() {
	proto.RegisterType((*Move)(nil), "models.Move")
	proto.RegisterType((*Piece)(nil), "models.Piece")
	proto.RegisterMapType((map[int32]int32)(nil), "models.Piece.CaptureMoveEnemiesEntry")
	proto.RegisterType((*Board)(nil), "models.Board")
	proto.RegisterMapType((map[int32]*Piece)(nil), "models.Board.PieceByIdEntry")
	proto.RegisterMapType((map[int32]*Piece)(nil), "models.Board.PositionPiecesEntry")
}

func init() { proto.RegisterFile("checkers.proto", fileDescriptor_49bee1d1b4b6400f) }

var fileDescriptor_49bee1d1b4b6400f = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x4d, 0x6f, 0xda, 0x4c,
	0x10, 0xc7, 0x15, 0x13, 0xfb, 0x21, 0x03, 0x18, 0x9e, 0x2d, 0x22, 0x0e, 0xea, 0x21, 0x50, 0xa1,
	0xa6, 0x3d, 0xa0, 0xa8, 0xbd, 0xb4, 0x51, 0x4f, 0x54, 0x54, 0x7d, 0x51, 0x25, 0x64, 0x55, 0xca,
	0xd1, 0x32, 0xf6, 0x12, 0x56, 0x18, 0xaf, 0xbb, 0x6b, 0x13, 0xf1, 0x91, 0xfa, 0xd5, 0xfa, 0x29,
	0xaa, 0x7d, 0x33, 0x26, 0xb8, 0xa7, 0xde, 0xbc, 0xb3, 0xbf, 0xf9, 0xef, 0x7f, 0x76, 0x66, 0x0d,
	0x6e, 0xb4, 0xc6, 0xd1, 0x06, 0x33, 0x3e, 0xcd, 0x18, 0xcd, 0x29, 0x72, 0xb6, 0x34, 0xc6, 0x09,
	0x1f, 0xbf, 0x86, 0xf3, 0xef, 0x74, 0x87, 0x11, 0x82, 0xf3, 0x15, 0xa3, 0x5b, 0xef, 0xec, 0xfa,
	0xec, 0xc6, 0xf6, 0xe5, 0x37, 0x72, 0xc1, 0xca, 0xa9, 0x67, 0xc9, 0x88, 0x95, 0xd3, 0xf1, 0xaf,
	0x06, 0xd8, 0x0b, 0x82, 0x23, 0x2c, 0x76, 0x48, 0xac, 0x59, 0x8b, 0xc4, 0x68, 0x00, 0x4e, 0x96,
	0x84, 0x7b, 0xcc, 0x24, 0xdd, 0xf4, 0xf5, 0x0a, 0x0d, 0xa1, 0x99, 0x51, 0x4e, 0x72, 0x42, 0x53,
	0xaf, 0x21, 0xe9, 0x72, 0x2d, 0x4e, 0xdc, 0x90, 0xf4, 0xc1, 0x3b, 0x97, 0x19, 0xf2, 0x5b, 0xf0,
	0x51, 0x98, 0xe5, 0x05, 0xc3, 0xb1, 0x67, 0xcb, 0x78, 0xb9, 0x46, 0x33, 0x18, 0x64, 0x94, 0x73,
	0xb2, 0x4c, 0x70, 0xa0, 0x83, 0xc1, 0x96, 0xee, 0x30, 0xf7, 0x9c, 0xeb, 0xc6, 0x4d, 0xeb, 0x4d,
	0x7b, 0xaa, 0x4a, 0x9a, 0x8a, 0x7a, 0xfc, 0xbe, 0x61, 0x3f, 0x2a, 0x54, 0x04, 0x39, 0xfa, 0x0c,
	0x57, 0xa5, 0x86, 0x31, 0x12, 0x26, 0x5a, 0xe6, 0xbf, 0x1a, 0x99, 0x4b, 0x83, 0x2f, 0x4a, 0x5a,
	0x29, 0xdd, 0x43, 0xbf, 0x6a, 0x22, 0xc0, 0x29, 0xde, 0x12, 0xcc, 0xbd, 0xa6, 0x14, 0x99, 0x18,
	0x11, 0x79, 0x5d, 0xd3, 0x8a, 0x87, 0xb9, 0xe2, 0xe6, 0x69, 0xce, 0xf6, 0x3e, 0x8a, 0x4e, 0x36,
	0x86, 0x73, 0xb8, 0xfc, 0x0b, 0x8e, 0x7a, 0xd0, 0xd8, 0xe0, 0xbd, 0xbe, 0x76, 0xf1, 0x89, 0xfa,
	0x60, 0xef, 0xc2, 0xa4, 0xc0, 0xba, 0x49, 0x6a, 0x71, 0x67, 0xbd, 0x3b, 0x1b, 0xff, 0x76, 0xc0,
	0x9e, 0xd1, 0x90, 0xc5, 0x95, 0x5e, 0x5d, 0xc8, 0x5e, 0x4d, 0xc0, 0xc9, 0x84, 0x2b, 0xee, 0x59,
	0xd2, 0x6b, 0xe7, 0xc8, 0xab, 0xaf, 0x37, 0xd1, 0x7b, 0xb8, 0xca, 0x18, 0xde, 0x11, 0x5a, 0x70,
	0x55, 0xe1, 0x63, 0xc8, 0xcd, 0xbd, 0xcb, 0x5e, 0x36, 0xfd, 0x81, 0x01, 0x84, 0xd3, 0xfb, 0x90,
	0x6b, 0xdf, 0x68, 0x04, 0x6d, 0xd5, 0xff, 0x3c, 0xc8, 0x0b, 0x96, 0xea, 0x0e, 0xb7, 0x74, 0xec,
	0x47, 0xc1, 0x52, 0x14, 0xc0, 0x44, 0x9e, 0x13, 0x30, 0xfc, 0xb3, 0x20, 0x8c, 0xa4, 0x0f, 0xc1,
	0xaa, 0x60, 0xf9, 0x1a, 0xb3, 0x27, 0xbd, 0x15, 0x53, 0x70, 0xe2, 0x71, 0x24, 0x73, 0x7d, 0x93,
	0xfa, 0x49, 0x65, 0x1e, 0x75, 0xfa, 0x0e, 0xfe, 0x2f, 0x52, 0x33, 0x3b, 0x81, 0x2e, 0xd8, 0xa9,
	0x2b, 0xb8, 0x77, 0xe0, 0x16, 0xaa, 0xf4, 0x09, 0xb8, 0x34, 0xc3, 0x69, 0x39, 0x21, 0x6a, 0x34,
	0x6c, 0xbf, 0x23, 0xa2, 0x66, 0x10, 0x38, 0x7a, 0x05, 0xbd, 0x15, 0x49, 0x12, 0x21, 0x5f, 0x82,
	0x4d, 0x09, 0x76, 0x55, 0xfc, 0x80, 0xbe, 0x84, 0xee, 0xe3, 0x9a, 0xe4, 0xb8, 0x42, 0x5e, 0x48,
	0xd2, 0x95, 0xe1, 0x23, 0x70, 0x99, 0x84, 0xd1, 0xa6, 0x02, 0x82, 0x02, 0x65, 0xf8, 0x00, 0xde,
	0x42, 0x5b, 0x2b, 0xaa, 0xd2, 0x5a, 0x75, 0xa5, 0xb5, 0x94, 0xba, 0xaa, 0xea, 0x16, 0xda, 0x5a,
	0x5a, 0x65, 0xb4, 0x6b, 0x33, 0xd4, 0x31, 0x2a, 0xe3, 0x2b, 0x74, 0x8d, 0x0d, 0x93, 0xd4, 0x91,
	0x49, 0x23, 0x93, 0x24, 0x27, 0x6c, 0x6a, 0x5c, 0xa9, 0x34, 0x35, 0xda, 0x6e, 0x76, 0x14, 0x44,
	0x1f, 0xa0, 0xa5, 0x1a, 0xbe, 0xdc, 0x07, 0x24, 0xf6, 0x5c, 0xa9, 0xf3, 0xfc, 0x89, 0x8e, 0x00,
	0x66, 0xfb, 0x2f, 0xb1, 0x92, 0xb8, 0xc8, 0xcc, 0x7a, 0xb8, 0x80, 0x67, 0x35, 0x87, 0xd4, 0x3c,
	0x88, 0x17, 0xd5, 0x07, 0x71, 0x52, 0xdd, 0xe1, 0x7d, 0x0c, 0xbf, 0x81, 0x7b, 0x7c, 0xdc, 0x3f,
	0x88, 0x2d, 0x1d, 0xf9, 0x4f, 0x7d, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0x51, 0x83, 0xb6, 0xd8,
	0x65, 0x05, 0x00, 0x00,
}
